import random
from deap import creator, tools, base, algorithms
from snake_engine import SnakeEngine
import numpy as np

snakeEngine = SnakeEngine()

# while True:
#     snakeEngine.evaluate([-0.27054654773227893, 0.2601641960666514, -0.198485755974814, -0.17306066800375441, 0.18872088691277877, 0.302302541209554, -0.3583358274808248, -0.3236012862356932, 0.1494636426903564, 0.11820021811168413, -0.30902611822333725, 0.429249357918118, 0.41993709830890913, 0.13283651221309478, 0.2904151046749678, -0.376683574748358, 0.4641457543154305, 0.24209727664342195, 0.35438821445136204, 0.24314904453695207, 0.1909844789272408, 0.10696646458646653, -0.3682347861228218, -0.35286729113905557, -0.2314428064531172, 0.4322447322535454, -0.1515868267612437, 0.3583735464661839, -0.18456274969345798, -0.27334840470457067, 0.1688603259805389, -0.4259441765907547, 0.4048567325087171, 0.3627234869402085, -0.34539338464508706, -0.008077353618136107, 0.36688145027265395, -0.16910142075746326, -0.4973906790661228, -0.47099041276591347, 0.07828975095888757, 0.3541933768481802, 0.01533332860868819, -0.1423329925236313, 0.18517819251358225, 0.12445684027430459, 0.21314335360095715, -0.13280255792757123, 0.18101750732087363, 0.46767850732493, -0.2991671728515991, 0.27455335972571704, 0.13887157037770748, 0.024397607907423735, -0.04906534549347663, 0.15698859043854874, -0.4353331602888144, -0.21115806898662415, -0.17925232057243512, 0.2318989019052895, -0.10268706217034274, 0.10999862126435267, -0.04404672258851117, -0.16442629687262078, -0.18067963305743773, 0.3120773359975093, -0.3207712486201658, -0.2758277632818098, -0.17337260153104328, 0.0487109224532285, 0.49190975957201377, 0.17969280113703268, -0.08331988549980851, 0.41556433816516747, 0.1558748482295954, 0.39192021542651767, 0.1688822497393856, -0.47176424488849145, -0.3841417940233335, 0.3175738913092132, -0.4019192661247283, 0.08387049248066503, -0.2039325995981095, -0.2074292105991522, 0.14463016543442075, -0.3660839266776217, 0.023435241208675572, 0.3182217363193319, -0.06568696901621052, 0.03610756511944058, 0.08249725035394206, -0.2504091817396804, 0.15041650224096303, 0.2505089756547595, 0.11310660383293736, -0.2763340294688239, -0.005702711057913867, -0.1208069554417035, -0.08658571986618857, 0.4954686199498981, 0.4646206076924506, -0.1938816358427614, 0.33904413078020446, 0.14191318393564656, -0.44636416370328524, -0.08140967092654361, -0.11848911059008005, -0.18833144227692655, -0.11787723274663342, 0.3681957285166282, 0.152661906535714, 0.13147046272845875, -0.19108543499694708, -0.1162460706846864, 0.10527352299023751, 0.2935106116998747, 0.24231977152020634, -0.17708009225577404, -0.40420148461639127, -0.01761136213937431, -0.4308882485066875, 0.19396115588827745, 0.1684387368421716, -0.47071489182715576, -0.26605448033348333, -0.3694485545130115, -0.4038267010397265, -0.30999532783732164, 0.4598439629375719, -0.24922493048606265, 0.3957362867377566, -0.18693211270474286, 0.16065917795414686, 0.4494568723800998, 0.19656855465509893, 0.3687444462228562, -0.1927345855424497, -0.3948615650752775, 0.03847418313308926, 0.04326834790938483, 0.005567643474385209, 0.4125101224844592, -0.15899866193078527, -0.027722372020699493, 0.4742997799284262, -0.13466974985886915, -0.274249764968188, -0.46550169755102966, 0.31097642131977354, 0.20036543389834138, 0.23867456537578358, 0.1603021247089168, -0.1900009641427548, 0.32816789757205456, 0.09855865942177378, -0.3492963857928838, 0.45218529603864377, -0.4112774572580875, 0.26670927395896515, -0.33924990786684983, 0.1859773983559173, -0.19357984142491835, 0.4643765288876194, -0.2783995317371919, -0.430360875049704, 0.21557692808617135, -0.12595105210305668, 0.041791541414315736, 0.1039836752710025, 0.46302264692378337, -0.41487735367995016, 0.14534875149351767, 0.3102430025964128, -0.3706687737396953, 0.1294466576729726, -0.48196723580418677, -0.13815427241370182, 0.2410978294026851, -0.4085597735627047, 0.33414033740313165, -0.10802289906688145, -0.47248919175158854, 0.4954438234339048, 0.008503340516971436, -0.16314284202869245, 0.3015335793598185, -0.3422770805729718, 0.4113432801662963, -0.08227348124208889, -0.3003992663173768, -0.3290544313963927, 0.36980942673416883, 0.11832293296909124, -0.1896721455115531, -0.4836831702552511, 0.2338583329553866, 0.031241903547743144, -0.059531145469282065, 0.3404831193236304, -0.41726989528555036])

# константы генетического алгоритма
POPULATION_SIZE = 5000      # количество индивидуумов в популяции
P_CROSSOVER = 0.075         # вероятность скрещивания
P_MUTATION = 0.02          # вероятность мутации индивидуума
MAX_GENERATIONS = 90      # максимальное количество поколений
HALL_OF_FAME_SIZE = 1

hof = tools.HallOfFame(HALL_OF_FAME_SIZE)

ind_size = 200  # Менять в случае изменения структуры нейронной сети 
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)
toolbox = base.Toolbox()
toolbox.register("weight_bin", random.uniform, -0.5, 0.5)  # Initiate random weights
toolbox.register("individual", tools.initRepeat, creator.Individual,
                 toolbox.weight_bin, n=ind_size)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)


def mutRandFloat(individual, indpb):
    for i in range(len(individual)):
        if random.random() < indpb:
            individual[i] = random.uniform(-0.5, 0.5)
    return individual,

toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", mutRandFloat, indpb=0.024)
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("evaluate", snakeEngine.evaluate)

stats = tools.Statistics(lambda ind: ind.fitness.values)
stats.register("max", np.max)
stats.register("avg", np.mean)

population = toolbox.population(n=POPULATION_SIZE)

population, logbook = algorithms.eaSimple(population, toolbox,
                                          cxpb=P_CROSSOVER,
                                          mutpb=P_MUTATION,
                                          ngen=MAX_GENERATIONS,
                                          halloffame=hof,
                                          stats=stats,
                                          verbose=True)


maxFitnessValues, meanFitnessValues = logbook.select("max", "avg")

best = hof.items[0]
#  Вывод лучшего представителя
print(best)
with open("output.txt", 'a', encoding='utf-8') as f:
    f.write(f"{best}\n")
